常用数据类型
  char    1个字节   -128到127  或0到255
  int     4个字节   -2147483648 到 2147483647
  float   4个字节	精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)
  double  8个字节	双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)

typedef type newname; //使用 typedef 为一个已有的类型取一个新的名字

在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。

通常把常量定义为大写字母形式

+=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	C += A 相当于 C = C + A

sizeof	sizeof运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。
*	      指针运算符* 指向一个变量。例如，*var; 将指向变量 var。


static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。
extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。

using namespace std ，它声明了命名空间 std，后续如果有未指定命名空间的符号，那么默认使用 std，这样就可以使用 cin、cout、vector 等。
假设你不使用预处理 using namespace std;,就要加上 std::cin 或者 std::cout。

do
{
   statement(s);

}while( condition );
注意，条件表达式出现在循环的尾部，所以循环中的 statement(s) 会在条件被测试之前至少执行一次。
如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement(s)。这个过程会不断重复，直到给定条件变为假为止。

setw() 函数只对紧接着的输出产生作用。
当后面紧跟着的输出字段长度小于 n 的时候，在该字段前面用空格补齐，当输出字段长度大于 n 时，全部整体输出。

C++ 支持多维数组。多维数组声明的一般形式：type name[size1][size2]...[sizeN];

strchr(s1, ch);   返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。

int    *ip;    /* 一个整型的指针 */
double *dp;    /* 一个 double 型的指针 */
float  *fp;    /* 一个浮点型的指针 */
char   *ch;    /* 一个字符型的指针 */
所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。
不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。
C++ 不支持在函数外返回局部变量的地址，除非定义局部变量为 static变量。
&：取址   *：取值。

. 点运算符
下面的代码把值 zara 赋给对象 emp 的 first_name 成员：
strcpy(emp.first_name, "zara");

-> 箭头运算符
如果 p_emp 是一个指针，指向类型为 Employee 的对象，则要把值 zara 赋给对象 emp 的 first_name 成员，需要编写如下代码：
strcpy(p_emp->first_name, "zara");

https://www.runoob.com/cplusplus/cpp-classes-objects.html
